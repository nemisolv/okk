package com.vht.kafkamonitoring;


import com.vht.kafkamonitoring.util.LogUtil;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.stereotype.Component;


@Component
@RequiredArgsConstructor
@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)
public class AppRunner implements ApplicationRunner {
    // This method will be called after the application context is loaded
    AppScheduler appScheduler;
    @Override
    public void run(ApplicationArguments args)    {


        // ch·ªù kho·∫£ng 1s ƒë·ªÉ ƒëo CPU, RAM kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi vi·ªác kh·ªüi ƒë·ªông ·ª©ng d·ª•ng, ch·ªâ ch·ªù 1s l√∫c kh·ªüi ch·∫°y th√¥i, c√≤n c√°c l·∫ßn cron th√¨ kh√¥ng c·∫ßn
        try {
            Thread.sleep(1000); //
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt(); // Restore the interrupted status
            System.out.println("Thread was interrupted: " + e.getMessage());
        }

        LogUtil.info("üöÄ Application started. Initializing monitoring task...");

        appScheduler.runMonitoring();

        LogUtil.info("‚úÖ Monitoring task completed at startup.");    }
}
